'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.revert = exports.inject = exports.fullPath = exports.file = exports.dir = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var name = 'remote-redux-devtools-on-debugger';
var flag = '<!--  ' + name + ' -->';
var end = '</body>\n</html>\n';

var dir = exports.dir = 'local-cli/server/util';
var file = exports.file = 'debugger.html';
var fullPath = exports.fullPath = _path2.default.join(dir, file);

var inject = exports.inject = function inject(modulePath, bundleCode, options) {
  var filePath = _path2.default.join(modulePath, fullPath);
  if (!_fs2.default.existsSync(filePath)) return false;

  var opts = _extends({}, options, { autoReconnect: true });
  // Check development mode
  var bundleTag = !process.env.__DEV__ ? '  <script>\n    ' + bundleCode + '\n  </script>' : '  <script src="http://localhost:3030/js/bundle.js"></script>';
  var optionsTag = options ? '  <script>window.remotedevOptions = ' + JSON.stringify(opts) + ';</script>' : '';
  var code = [flag, '  </audio>', // Fix for RN ^0.44, it will skiped on Chrome for old versions of RN
  '  <style>', '    body { overflow: hidden; }', '  </style>', '  <div id="' + name + '"></div>', optionsTag, bundleTag, end].join('\n');

  var html = _fs2.default.readFileSync(filePath, 'utf-8');
  var position = html.indexOf(flag); // already injected ?
  if (position === -1) {
    position = html.indexOf('</body>');
  }
  _fs2.default.writeFileSync(filePath, html.substr(0, position) + code);
  return true;
};

var revert = exports.revert = function revert(modulePath) {
  var filePath = _path2.default.join(modulePath, fullPath);
  if (!_fs2.default.existsSync(filePath)) return false;

  var html = _fs2.default.readFileSync(filePath, 'utf-8');
  var position = html.indexOf(flag);
  if (position !== -1) {
    _fs2.default.writeFileSync(filePath, html.substr(0, position) + end);
  }
  return true;
};